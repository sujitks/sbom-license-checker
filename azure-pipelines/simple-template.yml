# Simple SBOM Pipeline Template
# Copy this file to your repository as azure-pipelines.yml and customize as needed

trigger:
- main

# Variables - Customize these for your project
variables:
  # Project configuration
  projectType: 'auto'              # Change to: dotnet, nodejs, python, or auto
  scanPath: '/workspace'           # Path to scan within container
  
  # License compliance (optional)
  complianceCheck: true            # Set to false to skip compliance checks
  allowedLicenses: 'MIT,Apache-2.0,BSD-3-Clause,BSD-2-Clause,ISC,Unlicense'
  
  # Notification settings (optional)
  notifyOnFailure: true            # Send email on compliance failures
  notificationEmail: 'team@company.com'  # Update with your team email

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: SBOM_Scan
  displayName: 'SBOM License Scan'
  jobs:
  - job: LicenseScan
    displayName: 'License Analysis'
    steps:
    
    # Checkout your source code
    - checkout: self
      displayName: 'Get Source Code'
    
    # Run the SBOM scanner
    - task: Docker@2
      displayName: 'Run License Scanner'
      inputs:
        command: 'run'
        arguments: |
          --rm \
          -v $(Build.SourcesDirectory):/workspace \
          -v $(Build.ArtifactStagingDirectory)/reports:/output \
          ghcr.io/sujitks/sbom-license-checker:latest \
          --type $(projectType) \
          --path $(scanPath) \
          --output /output \
          --verbose
    
    # Generate HTML report
    - task: PowerShell@2
      displayName: 'Create HTML Report'
      inputs:
        targetType: 'inline'
        script: |
          # Simple HTML report generation
          $reportsDir = "$(Build.ArtifactStagingDirectory)/reports"
          $htmlFile = "$reportsDir/license-report.html"
          
          # Check if any reports were generated
          $licenseFiles = Get-ChildItem "$reportsDir" -Recurse -Name "license-summary.txt"
          if ($licenseFiles.Count -eq 0) {
              Write-Host "No license files found. Creating basic report."
              $html = "<html><body><h1>No license data found</h1><p>The scanner did not find any packages to analyze.</p></body></html>"
              $html | Out-File -FilePath $htmlFile -Encoding UTF8
              exit 0
          }
          
          # Create HTML report
          $html = @"
          <!DOCTYPE html>
          <html>
          <head>
              <title>License Report - $(Build.Repository.Name)</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .header { background: #0078d4; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
                  .license-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  .license-table th, .license-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
                  .license-table th { background-color: #f2f2f2; }
                  .license-table tr:nth-child(even) { background-color: #f9f9f9; }
                  .summary { background: #f8f9fa; padding: 15px; margin: 20px 0; border-radius: 5px; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>ðŸ“‹ License Report</h1>
                  <p>Repository: $(Build.Repository.Name) | Build: $(Build.BuildNumber)</p>
                  <p>Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>
              </div>
              
              <table class="license-table">
                  <thead>
                      <tr><th>Package</th><th>License</th></tr>
                  </thead>
                  <tbody>
          "@
          
          # Add packages from all license files
          foreach ($licenseFile in $licenseFiles) {
              $content = Get-Content "$reportsDir/$licenseFile"
              foreach ($line in $content) {
                  if ($line -match "^(.+?):\s*(.+)$") {
                      $package = $matches[1].Trim()
                      $license = $matches[2].Trim()
                      $html += "<tr><td>$package</td><td>$license</td></tr>"
                  }
              }
          }
          
          $html += @"
                  </tbody>
              </table>
              <div class="summary">
                  <p>Generated by SBOM License Scanner | Build $(Build.BuildNumber)</p>
              </div>
          </body>
          </html>
          "@
          
          $html | Out-File -FilePath $htmlFile -Encoding UTF8
          Write-Host "HTML report created: $htmlFile"
    
    # Publish the reports as build artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish License Reports'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/reports'
        artifactName: 'license-reports'
    
    # Optional: Compliance check
    - task: PowerShell@2
      displayName: 'License Compliance Check'
      condition: eq(variables.complianceCheck, true)
      inputs:
        targetType: 'inline'
        script: |
          $reportsDir = "$(Build.ArtifactStagingDirectory)/reports"
          $allowedList = "$(allowedLicenses)" -split ","
          $violations = @()
          
          # Check all license files for violations
          $licenseFiles = Get-ChildItem "$reportsDir" -Recurse -Name "license-summary.txt"
          foreach ($licenseFile in $licenseFiles) {
              $content = Get-Content "$reportsDir/$licenseFile"
              foreach ($line in $content) {
                  if ($line -match "^(.+?):\s*(.+)$") {
                      $package = $matches[1].Trim()
                      $license = $matches[2].Trim()
                      
                      if ($license -notmatch "UNKNOWN|NOASSERTION" -and $license -notin $allowedList) {
                          $violations += "$package ($license)"
                      }
                  }
              }
          }
          
          if ($violations.Count -gt 0) {
              Write-Host "##vso[task.logissue type=warning]License compliance violations found:"
              foreach ($violation in $violations) {
                  Write-Host "##vso[task.logissue type=warning] - $violation"
              }
              Write-Host "##vso[task.setvariable variable=ComplianceViolations]$($violations.Count)"
          } else {
              Write-Host "âœ… All licenses are compliant"
              Write-Host "##vso[task.setvariable variable=ComplianceViolations]0"
          }
    
    # Optional: Send notification on failure
    - task: PowerShell@2
      displayName: 'Send Notification'
      condition: and(eq(variables.notifyOnFailure, true), gt(variables.ComplianceViolations, 0))
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Compliance violations detected. In a real scenario, this would send an email to $(notificationEmail)"
          Write-Host "Consider implementing EmailReport task or custom notification logic here"